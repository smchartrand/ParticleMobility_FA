# This file was automatically translated by OMPC (http://ompc.juricap.com)

from ompc import *



#% THIS CODE CREATES A NORMALLY DISTRIBUTED GRAIN SIZE DISTRIBUTION
# SPECIFYING A GEOMTRIC MEAN GRAIN SIZE AND THE STANDARD DEVIATION.

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#% STEP 1: CREATE NORMAL DISTRIBUTION

prompt = (mstring('Enter the geometric mean grain size in millimeters (2.0 - 32.0):'), mstring('Enter the standard deviation of the distribution (0.25 - 2.0):'))
dlg_title = mstring('Friction angle measurement virtual streambed and particle number details')
num_lines = 1
defaultans = (mstring('8'), mstring('0.5'))
ILanswer = inputdlg(prompt, dlg_title, num_lines, defaultans)
# Pass the distribution mean to a variable
GS_Dg = str2double(ILanswer(1))
# Convert the geometric mean value (in millimeters) to Psi units
GS_DgPsi = log(GS_Dg) / log(2)
# Pass the standard deviation input to a variable
GS_Sigma = str2double(ILanswer(2))
# Specify the limits x of the normal distribution - this is equivalent
# to defining the Psi-based limits of the grain size distribution pdf
Upper_GSLimit = GS_DgPsi + (5 * GS_Sigma)
Lower_GSLimit = GS_DgPsi - (5 * GS_Sigma)
ND_Limits = (mslice[Lower_GSLimit:0.01:Upper_GSLimit])
# Convert the limits to grain size in millimeters
GS_inMM = 2. ** ND_Limits
# Make the distribution based on the information just provided
Distro = cdf(mstring('Normal'), ND_Limits, GS_DgPsi, GS_Sigma)
# Plot the distribution for inspection
# Specify a plot style
plotStyle = (mstring('b-'))
# Make the plot
h1 = figure(1)
plot(GS_inMM, Distro, plotStyle(1))
# Make x-axis log scale
set(gca, mstring('xscale'), mstring('log'))
ax = gca
# x-axis limits
ax.XLim = mcat([10 ** (-1), 10 ** (2.5)])
# Turn grid on
grid("on")
# Specify axis labels
ylabel(mstring('Percent finer'))
xlabel(mstring('Grainsize (mm)'));
title(mstring('Simulated Grain Size Distribution'))

FAModelFig1 = (mstring('Model_GSDistribution.png'))
# Export a file and specify dimensions, etc.
set(gcf, mstring('Units'), mstring('centimeters'))
set(gcf, mstring('PaperType'), mstring('B5'), mstring('PaperPositionMode'), mstring('auto'))
_print(h1, mstring('-dpng'), FAModelFig1, mstring('-r600'))

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#% STEP 2: COMPUTE THE GRAIN SIZE STATISTICS NEEDED FOR THE FRICTION 
# ANGLE MEASUREMENTS. THIS REQUIRES THREE COLUMN VECTORS WITH GRAIN SIZE 
# (MM), GRAIN SIZE (PSI) AND THE ASSOCIATED CUMULATIVE DISTRIBUTION VALUE

# Specify the PsiRange vector for analysis
PsiRange = (mslice[Lower_GSLimit:0.5:Upper_GSLimit])
# Find indices which line up with half-scale psi values over the range
# specified above, and write the associated grain sizes to a new
# vector, and then write the associated cumulative distribution
# probability density values to a new vector
# Index variable
Index(1, length(PsiRange)).lvalue = zeros
# Grain size distribution in mm
GS_Distro_MM(1, length(PsiRange)).lvalue = zeros
# Grain size cumulative probability distribution
GS_Distro_CD(1, length(PsiRange)).lvalue = zeros
# Enter loop
for j in mslice[1:length(PsiRange)]:
    
    Index(j).lvalue = find(ND_Limits == PsiRange(j))
    GS_Distro_MM(j).lvalue = GS_inMM(1, Index(j))
    GS_Distro_CD(j).lvalue = Distro(1, Index(j))
    
end

# Identify the D50 grain size    
D50 = GS_inMM(mean(find(Distro < 0.5, 1, mstring('last')), find(Distro > 0.5, 1, mstring('first'))))
# Identify the D84 grain size 
D84 = GS_inMM(mean(find(Distro < 0.84, 1, mstring('last')), find(Distro > 0.84, 1, mstring('first'))))

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#% STEP THREE: PACKAGE THE GRAIN SIZE AND CUMULATIVE DISTRIBUTION 
# VECOTRS INTO A MATRIX 

# Create the matrix and flip the data so it lines up with the friction
# angle calculations
GSD = mcat([GS_Distro_MM, OMPCSEMI, PsiRange, OMPCSEMI, GS_Distro_CD]).cT

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#% STEP FOUR:IDENTIFY THE GRAIN SIZE (MM AND PSI) AND THE CUMULATIVE 
# DISTRIBUION TO USE FOR THE FRICTION ANGLE CALCULATIONS

# First identify the address of the 'last' ~ 0 value in the cumm
# distribution of the computed grain size distribution and then
# the 'first' 1 in the distribution.  This eliminates size
# classes which do not account for mass within the distribution
g0 = find(GSD(mslice[:], 3) > 0.000001, 1, mstring('first'))
g100 = find(GSD(mslice[:], 3) > 0.9999, 1, mstring('first'))
# Changed this to operate on the array rather than row or
# column for each spatial node.
GSDuse = GSD(mslice[g0:g100], mslice[:])

# Compute a few other statistics before closing this out
GSDlength = length(GSDuse) - 1
# Set the vector index parameter - the number of grain classes    
j = mslice[1:GSDlength]
# Compute characteristic grain size of each size class in the bed.
# First compute the average Psi class for the grain size distro
Grain_PsiAvg(j).lvalue = ((GSDuse(j, 2) + GSDuse(j + 1, 2)) * 0.5)
# Now compute the size in mm.
Grain_mmAvg(j).lvalue = 2 **elpow** Grain_PsiAvg(j)
clear("j")

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end



